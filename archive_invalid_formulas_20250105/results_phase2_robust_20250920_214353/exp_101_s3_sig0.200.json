{
  "experiment_id": "s3_sigma0.2_nx100_T0.5_lam2.0_m5_seed101",
  "config": {
    "s": 3,
    "sensor_positions": [
      0.2,
      0.5,
      0.8
    ],
    "placement_type": "shifted",
    "sigma": 0.2,
    "n_x": 100,
    "T": 0.5,
    "lambda": 2.0,
    "c": 1.0,
    "m": 5,
    "n_t": 100,
    "seed": 101,
    "delta": 0.05,
    "alpha": 0.001,
    "M": 2000,
    "R": 100,
    "n": 300,
    "Delta_x": 0.01,
    "Delta_t": 0.005050505050505051,
    "mcmc_n_steps": 10000,
    "mcmc_n_burn": 2000,
    "is_baseline": false
  },
  "status": "error",
  "error": "'dict' object cannot be interpreted as an integer",
  "traceback": "Traceback (most recent call last):\n  File \"/Users/tanishagupta/PAC_BAYES_INVERSE_PDE.-1/run_full_grid_phase2_robust.py\", line 76, in run_single_experiment_with_timeout\n    mcmc_results = sampler.run_adaptive_length(n_burn=1000)\n  File \"/Users/tanishagupta/PAC_BAYES_INVERSE_PDE.-1/src/mcmc/adaptive_metropolis_hastings_phase2.py\", line 128, in run_adaptive_length\n    kappa_init = self.posterior.prior.sample(1, seed=self.rng.randint(10000))[0]\n  File \"/Users/tanishagupta/PAC_BAYES_INVERSE_PDE.-1/run_full_grid_phase2.py\", line 87, in sample\n    return rng.uniform(self.kappa_min, self.kappa_max, (n_samples, self.m))\n  File \"numpy/random/mtrand.pyx\", line 1158, in numpy.random.mtrand.RandomState.uniform\n  File \"_common.pyx\", line 636, in numpy.random._common.cont\nTypeError: 'dict' object cannot be interpreted as an integer\n",
  "performance": {
    "runtime": 0.007905960083007812
  }
}